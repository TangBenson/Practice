.\bin\elasticsearch -E xpack.security.enabled=false =>啟動elasticsearch -- http://localhost:9200/
.\bin\elasticsearch -E xpack.security.enabled=false -E node.name=xxx
.\bin\kibana.bat =>啟動kibana -- http://localhost:5601/

node概念不是硬體，而是一個process就是一個node

同台機器上要跑兩個node，要用兩個目錄(C:\elasticsearch-8.9.2)去跑，以免共用設定....

node之間溝通用9300 port

9200 port是用來提供 rest api的 port

一台機器開多個node只有在測試或memory很大時才這樣做

遇到一些怪問題就把data資料夾清空，不然就重新解壓縮下載的檔案，直接重來

同資料夾不能run兩次process

新增資料到index要用put，並指定id。若不指定id則用post，比較符合rest api規則

文件被修改無法復原，_version告訴你這個index的這個id被改幾次，增刪修都會一直累加

query string是一種全文檢索的方式

elk不能改欄位type，但可用fields去增加子欄位，再設定子欄位type

資料加入elk若沒設定type，會用預設的(text/keyword)，若修改後要讓舊資料套用設定，
需要重匯入data才會套用，但其實預設text type時，elk會另外又建立keyword

term是資料寫入後被打碎的單位，token則是term加上一些metadata資訊，例如把fuck my gf存進去，fuck就會是一個term。

資料搬遷以shard為最小單位去搬

Dedicated coordinating node連資料都不存

請問indexing文件後，inverted index會從memory轉到segment file且唯讀，但若這筆document被刪除，index資料就不會從segment刪了嗎?  因為segment唯讀，這樣不就浪費了空間?
=> Ans : 確實不會從segment刪除，但會有另一個segment紀錄那些被刪除，之後segment做merge就知道哪些是被刪的

刪一筆document不會釋放空間，要刪除index才會

時間增長的資料建議用index來分，要刪就針對整個index刪就好

資料寫入後無法立刻用_serch查到，因為是near real time，但用GET可以查到。因為index從memory buffer存到segment需要一些時間。

bulk api的json格式特殊，是多個json用換行合併在一起

查詢出的資料分頁呈現要用from + size，但這兩個相加值不能超過一萬(index.max_)

segment file、data都會存在data資料夾下，所以關掉node再啟還是可以看到資料

elastic過往把index對應database，type對應table，後來發現type沒有意義，所以從7.0不再支持

elastic中的index的schema就稱為Mapping

字段類型keyword : 要完全匹配才能查
字段類型text : 可以被分詞後查詢

在Elasticsearch（ELK的一部分）中，"_score"是指搜索結果中每個文檔的相關性分數（relevance score）。當你執行一個查詢時，Elasticsearch會為每個匹配的文檔計算一個相對於查詢的相關性分數，該分數反映了文檔與查詢的匹配程度。"_score"分數越高，表示文檔與查詢越匹配

根據文檔的ID，如果具有相同ID的文檔已存在，將被用新文檔替換。Re-indexing實際上是一個刪除和索引操作的組合

但若使用_create，若文件已存在會跳錯誤409，而不會Re-indexing

_seq_no應該是針對index的異動次數記錄，_version是針對單筆document

----------------------------------------------------------------------------------

ngram是用空間換時間，用很多細微token減少搜尋時間














// 查有提供哪些_cat功能,_cat API提供清楚的格式以顯示諸如cluster,node與index狀態的資訊。
GET _cat

// 查有哪些node,加上?v可以顯示title
GET _cat/nodes?v

// 查有哪些index(database),以及有多少document等資訊
GET _cat/indices?v

// indexing(輸入)資料,index一定要給,若不存在就用預設值去建立index,id若不給則要用POST,系統會自建id。8.0 時已固定使用 _doc。_seq_no表示該index被異動過幾次
PUT /movies/_doc/1
{
  "title": "Star Wars: Episode VII – The Force Awakens",
  "director": "J.J. Abrams",
  "year": 2015
}
POST /games/_doc
{
  "title":"FF7",
  "director":"SE",
  "year":2016,
  "genres":["Action","Advantage","Fantasy"]
}
POST /games/_doc/1
{
  "title":"FFXVI",
  "director":"SE",
  "year":2023,
  "genres":["Action","Bloody","Fantasy"]
}
POST /games/_doc/2
{
  "title":"RO",
  "director":"Korean",
  "year":2003,
  "genres":["Action","Cute","Online"]
}

// 更新資料加入欄位
PUT /movies/_doc/1
{
"title": "Star Wars: Episode VII – The Force Awakens",
"director": "J.J. Abrams",
"year": 2015,
"Genres": ["Action", "Adventure", "Fantasy"]
}

// 透過id取資料
GET movies/_doc/1

// 透過id取部分資料
GET movies/_doc/1?_source=title,year

// 透過id取不含metadata的資料
GET movies/_source/1

// 刪除資料
DELETE movies/_doc/eU1KnYoBCYekMzJzTT47

// 使用_search可指定想搜尋的index與type;若不指定,代表搜尋所有index。_search這個endpoint可以用GET或POST
GET _search
POST movies/_search

// 刪除index
DELETE /movies

// DSL之 query string,OR是關鍵字。_search這個endpoint可以用GET或POST
GET _search
{
  "query": {
    "query_string": {
      "query": "ff7 OR star",
      "fields": ["title"]
    }
  }
}
POST /games/_search
{
  "query": {
    "query_string": {
      "query": "advantage"
    }
  }
}

// 同上,也是query string
GET /_search?q=title:ff7 OR star
GET /games/_search?q=advantage

// match_all 是 Elasticsearch中的一種查詢類型，它的主要用途是匹配索引中的所有文檔，而不應用任何過濾條件或搜索條件。設定_source表示只顯示title,director
POST /movies/_search
{
  "query": {
    "match_all": {}
  },
  "_source": ["title","director"]
}
POST /games/_search
{
  "query": {
    "match_all": {}
  }
}

// 在進行 query 時如要套用 filter,通常會使用bool query 與 filter 參數搭配使用。本例使用了"term" filter。Term filter 會檢查 query 結果,並只回傳所指定欄位中資料值符合的文件。
POST /movies/_search
{
  "query": {
    "bool": {
      "must": {
        "query_string": {
           "fields": ["title"],
           "query": "kill"
        }
      },
      "filter": {
        "term": {
          "year": "2003"
        }
      }
    }
  }
}

// 以下3個結果一樣，後兩個差在有無用query,當查詢的條件是必須參考Score的分數來取得較好的結果,這種查詢條件使用Query。其他的時候都使用Filter。
GET /movies/_search
{
  "query": {
    "query_string": {
      "query": "2014",
      "fields": ["year"]
    }
  }
}
POST /movies/_search
{
  "query": {
    "bool": { 
      "filter": {
        "term": {
          "year": "2014"
        }
      }
    }
  }
}
POST _search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      }, 
      "filter": {
        "term": {
          "year": "2014"
        }
      }
    }
  }
}

// 查不到,除非改成crime,因為打碎的token會存小寫。或是用後面教的_mapping
GET movies/_search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "genres": "Crime"
        }
      }
    }
  }
}

// 打碎的token會個別單字存小寫,所以查完整的J.J. Abrams無效
POST _search
{
  "query": {
    "term": {
      "director": "J.J. Abrams"
    }
  }
}
POST _search
{
  "query": {
    "term": {
      "director.keyword": "J.J. Abrams"
    }
  }
}
POST _search
{
  "query": {
    "term": {
      "director": "abrams"
    }
  }
}

// 對於movies各document的”director“欄位視為keyword型別,不做文字處理(保留原始內容)。但目前_doc type已經有了所使用的mapping,而且director欄位的設定與新的設定衝突,因此無法更新mapping。可以在既有mapping上添加新欄位的設定
POST /movies/_mapping
{
  "properties": {
    "director": {
      "type": "keyword"
    }
  }
}
POST /movies/_mapping
{
  "properties": {
     "director": {
        "type": "text",
        "fields": {
            "original": {"type": "keyword"} 
        }
     }
  }
}

// 重新index電影資料後,就能透過 term query以"director.original": "J.J. Abrams"這樣的條件來查詢了。
// Mapping 是 Elasticsearch 處理 document 的依據。如要更改 mapping,較佳的作法是將 index 整體刪除後,以備份資料套用新 mapping 重建。
// 因此,在使用Elasticsearch前,必須先確定資料的格式與使用方式,謹慎設計 mapping 後再做document indexing。
PUT /movies/_doc/1
{
  "title": "Star Wars: Episode VII – The Force Awakens",
  "director": "J.J. Abrams",
  "year": 2015,
  "genres": ["Action", "Adventure", "Fantasy"]
}
POST /movies/_search
{
  "query": {
    "term": {
      "director.original": "J.J. Abrams"
    }
  }
}
GET /movies/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "genres.keyword": "Crime"
          }
        }
      ]
    }
  }
}

// Create Index
PUT /games
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "_source": {
      "enabled": false
    },
    "properties": {
      "director": {
        "type": "text",
        "fields": {
          "original": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

// 前兩者一樣,只做新增,第3個會判斷存在則做修改
PUT games/_create/8
{
  "title": "Star Wars: Episode VII – The Force Awakens",
  "director": "J.J. Abrams",
  "year": 2015,
  "Genres": [
    "Action",
    "Adventure",
    "Fantasy"
  ]
}
PUT games/_doc/8?op_type=create
{
  "title": "Star Wars: Episode VII – The Force Awakens",
  "director": "J.J. Abrams",
  "year": 2015,
  "Genres": [
    "Action",
    "Adventure",
    "Fantasy"
  ]
}
PUT games/_doc/8
{
  "title":"FF7",
  "director":"SE",
  "year":2016,
  "genres":["Action","Advantage","Fantasy"]
}

// Get API
GET /movies/_doc/1

// Exists API
HEAD /movies/_doc/1

// Delete API
DELETE /movies/_doc/1

// Delete by Query API,刪除games index的所有資料
POST /games/_delete_by_query
{
  "query": { "match_all": {} } 
}

// Update API
POST /movies/_update/1
{
  "doc":{
    "likes": 12345
  }
}

// Multi Get API
GET /_mget
{
  "docs": [
    {
      "_index": "movies",
      "_id": "1"
    },
    {
      "_index": "movies",
      "_id": "2"
    }
  ]
}
GET /movies/_mget
{ 
  "ids": ["1","2"]
}

// Bulk API
PUT /_bulk
{
}

// Search API
GET /movies/_search?q=star
GET /movies/_search?q=star+OR+kill
GET /movies/_search?q=(star+OR+kill)+AND+year:[2003+TO+*]
POST /movies/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "query": "star OR kill"
          }
        }
      ],
      "filter": {
        "range": {
          "year": {
            "gte": 2003
          }
        }
      }
    }
  }
}
# Enable sort & profile
POST /movies/_search
{
  "from": 0, 
  "size": 20, 
  "sort": [
    {
      "year": {
        "order": "asc"
      }
    }
  ], 
  "profile": true,
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "title": {
              "query": "star kill",
              "operator": "or"
            }
          }
        }
      ],
      "filter": {
        "range": {
          "year": {
            "gte": 2003
          }
        }
      }
    }
  }
}





PUT movies/_doc/1
{"title":"Star Wars: Episode VII – The Force Awakens","director":"J.J. Abrams","year":2015,"genres":["Action","Adventure","Fantasy"]}

PUT movies/_doc/2
{"title":"The Godfather","director":"Francis Ford Coppola","year":1972,"genres":["Crime","Drama"]}

PUT movies/_doc/3
{"title":"Kill Bill: Vol. 1","director":"Quentin Tarantino","year":2003,"genres":["Action","Crime","Thriller"]}

PUT movies/_doc/4
{"title":"To Kill a Mockingbird","director":"Robert Mulligan","year":1962,"genres":["Crime","Drama","Mystery"]}

PUT movies/_doc/5
{"title":"Apocalypse Now","director":"Francis Ford Coppola","year":1979,"genres":["Drama","War"]}

PUT movies/_doc/6
{"title":"Kill Bill: Vol. 2","director":"Quentin Tarantino","year":2004,"genres":["Action","Crime","Thriller"]}

PUT movies/_doc/7
{"title":"The Assassination of Jesse James by the Coward Robert Ford","director":"Andrew Dominik","year":2007,"genres":["Biography","Crime","Drama"]}

PUT movies/_doc/8
{"title":"Interstellar","director":"Christopher Nolan","year":2014,"genres":["Adventure","Sci-Fi"]}

PUT movies/_doc/9
{"title":"The Dark Knight","director":"Christopher Nolan","year":2008,"genres":["Action","Crime","Drama"]}

PUT movies/_doc/10
{"title":"Lawrence of Arabia","director":"David Lean","year":1962,"genres":["Adventure","Biography","Drama"]}

